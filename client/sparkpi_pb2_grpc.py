# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sparkpi_pb2 as sparkpi__pb2


class SparkPiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPi = channel.unary_unary(
        '/sparkpi.SparkPi/GetPi',
        request_serializer=sparkpi__pb2.Scale.SerializeToString,
        response_deserializer=sparkpi__pb2.Pi.FromString,
        )


class SparkPiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetPi(self, request, context):
    """Get an estimation of Pi with a given scaling factor
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SparkPiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPi': grpc.unary_unary_rpc_method_handler(
          servicer.GetPi,
          request_deserializer=sparkpi__pb2.Scale.FromString,
          response_serializer=sparkpi__pb2.Pi.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sparkpi.SparkPi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
